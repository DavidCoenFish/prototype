
precision mediump float;

attribute float a_index;

uniform float u_fovhradian;
uniform vec2 u_viewportWidthHeight;
uniform vec3 u_cameraAt;
uniform vec3 u_cameraLeft;
uniform vec3 u_cameraUp;
uniform vec3 u_cameraPos;
uniform float u_cameraFar;

uniform vec4 u_sphere00;
uniform vec4 u_cylinder00;
uniform vec4 u_colour00;

uniform vec4 u_sphere01;
uniform vec4 u_cylinder01;
uniform vec4 u_colour01;

uniform vec4 u_sphere02;
uniform vec4 u_cylinder02;
uniform vec4 u_colour02;

uniform vec4 u_sphere03;
uniform vec4 u_cylinder03;
uniform vec4 u_colour03;

uniform vec4 u_sphere04;
uniform vec4 u_cylinder04;
uniform vec4 u_colour04;

uniform vec4 u_sphere05;
uniform vec4 u_cylinder05;
uniform vec4 u_colour05;

uniform vec4 u_sphere06;
uniform vec4 u_cylinder06;
uniform vec4 u_colour06;

varying float v_keepOrDiscard;

varying vec2 v_uv;
varying vec2 v_uvScale;

varying vec4 v_sphere;
varying vec4 v_cylinder;
varying float v_radius2;
varying vec4 v_colour;

void main() {
	//step return 0 if x < edge, 1 if edge <= x
	float ratio00 = step(-0.5, a_index) * step(a_index, 0.5)
	float ratio01 = step(0.5, a_index) * step(a_index, 1.5)
	float ratio02 = step(1.5, a_index) * step(a_index, 2.5)
	float ratio03 = step(2.5, a_index) * step(a_index, 3.5)
	float ratio04 = step(3.5, a_index) * step(a_index, 4.5)
	float ratio05 = step(4.5, a_index) * step(a_index, 5.5)
	float ratio06 = step(5.5, a_index) * step(a_index, 6.5)

	vec4 sphere = vec4(0.0, 0.0, 0.0, 0.0);
	vec4 cylinder = vec4(0.0, 0.0, 0.0, 0.0);
	vec4 colour = vec4(0.0, 0.0, 0.0, 0.0);

	sphere += (ratio00 * u_sphere00);
	cylinder += (ratio00 * u_cylinder00);
	colour += (ratio00 * u_colour00);

	sphere += (ratio01 * u_sphere01);
	cylinder += (ratio01 * u_cylinder01);
	colour += (ratio01 * u_colour01);

	sphere += (ratio02 * u_sphere02);
	cylinder += (ratio02 * u_cylinder02);
	colour += (ratio02 * u_colour02);

	sphere += (ratio03 * u_sphere03);
	cylinder += (ratio03 * u_cylinder03);
	colour += (ratio03 * u_colour03);

	sphere += (ratio04 * u_sphere04);
	cylinder += (ratio04 * u_cylinder04);
	colour += (ratio04 * u_colour04);

	sphere += (ratio05 * u_sphere05);
	cylinder += (ratio05 * u_cylinder05);
	colour += (ratio05 * u_colour05);

	sphere += (ratio06 * u_sphere06);
	cylinder += (ratio06 * u_cylinder06);
	colour += (ratio06 * u_colour06);

	vec3 cameraToAtom = sphere.xyz - u_cameraPos;

	float cameraSpaceX = -dot(cameraToAtom, u_cameraLeft);
	float cameraSpaceY = dot(cameraToAtom, u_cameraUp);
	float cameraSpaceZ = dot(cameraToAtom, u_cameraAt);
	float cameraSpaceXYLengthSquared = ((cameraSpaceX * cameraSpaceX) + (cameraSpaceY* cameraSpaceY));
	float cameraSpaceLength = sqrt(cameraSpaceXYLengthSquared + (cameraSpaceZ * cameraSpaceZ));
	float cameraSpaceXYLength = sqrt(cameraSpaceXYLengthSquared);

	float polarR = acos(clamp(cameraSpaceZ / cameraSpaceLength, -1.0, 1.0));
	float maxRadian = 0.5 * u_fovhradian * (length(u_viewportWidthHeight) / u_viewportWidthHeight.x);
	v_keepOrDiscard = 1.0 - (polarR / maxRadian);

	//replace atan with normalised vector, save (atan,sin,cos)
	float cameraSpaceXNorm = 1.0; //Xnorm not zero for correct second of two cases, either atom directly infront (and polarR == 0) or atom directly behind camera (polarR == 180)
	float cameraSpaceYNorm = 0.0;
	if (cameraSpaceXYLength != 0.0){
		cameraSpaceXNorm = cameraSpaceX / cameraSpaceXYLength;
		cameraSpaceYNorm = cameraSpaceY / cameraSpaceXYLength;
	}

	float width = u_viewportWidthHeight.x;
	float height = u_viewportWidthHeight.y;
	float fovHHalfRadians = u_fovhradian * 0.5;
	float screenR = polarR / fovHHalfRadians; //screen space, -1 ... 1

	float screenX = screenR * cameraSpaceXNorm;
	float apsectCorrection = (width / height);
	float screenY = screenR * cameraSpaceYNorm * apsectCorrection;

	float screenZRaw = cameraSpaceLength / u_cameraFar;
	float screenZ = (screenZRaw * 2.0) - 1.0;

	float sphereRadiusAngleRadians = asin(a_sphere.w / cameraSpaceLength);
	float pixelDiameter = width * (sphereRadiusAngleRadians / fovHHalfRadians);
	pixelDiameter += max(0.0, ((1.0 * screenR * width) * tan(sphereRadiusAngleRadians)));

	gl_Position = vec4(screenX, screenY, screenZ, 1.0);
	gl_PointSize = pixelDiameter;

	v_uvScale = vec2(pixelDiameter / width, -pixelDiameter / width * apsectCorrection);
	v_uv = vec2((screenX / 2.0) + 0.5, (screenY / 2.0) + 0.5) - (v_uvScale * 0.5);

	v_sphere = sphere;
	v_cylinder = cylinder;
	v_radius2 = sqrt((sphere.w * sphere.w) - (cylinder.w * cylinder.w));
	v_colour = colour;
}